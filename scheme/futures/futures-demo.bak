#lang racket

(define vector-size 10000)
(define values (make-vector vector-size))
(define loop-limit 10000)

(define proc (lambda (i)
               (lambda () 
                 (vector-set! values i 0)
                 (let loop ((n 0) )
                   (when (<= n loop-limit)
                     (vector-set! values i (+ (vector-ref values i) n)) 
                     (loop (+ n 1)))))))

(define start (current-milliseconds))

(let loop ((n 0))
  (when (< n 10000)
    (vector-set! values n (proc n))
    (loop (+ n 1))))
  
(let loop ((n 0))
  (when (< n 10000)
    ((vector-ref values n))
    (loop (+ n 1))))
  
(displayln (vector-ref values 0))
(displayln (vector-ref values 1))

(define mid (current-milliseconds))


(define end (current-milliseconds))

(displayln (- mid start))
(displayln (- end mid))